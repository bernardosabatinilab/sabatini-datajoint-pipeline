version: "v0.0.0"
LabBook: null
SciViz: # top level tab
  auth:
    mode: "database"
  pages: # individual pages
    Home:
      route: /home
      grids:
        grid5:
          type: fixed
          columns: 1
          row_height: 680
          components:
            comp:
              x: 0
              y: 0
              height: 1
              width: 1
              type: markdown
              # this example of image_route has the image in the /src dir
              image_route: ../../logo.svg
              text: |
                # Welcome to the datajoint navigator for the Sabatini Lab
    DLC Session Overview:
      route: /DLC_session_overview
      grids:
        grid1:
          type: fixed
          columns: 1
          row_height: 680
          components:
            Session Status:
              route: /session_sessionstatus
              link: /DLC_per_session_plots
              x: 0
              y: 0
              height: 1
              width: 1
              type: antd-table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_session, sabatini_dj_event, sabatini_dj_model):
                    session = sabatini_dj_session
                    event = sabatini_dj_event
                    model = sabatini_dj_model

                    session_process_status = session.Session
                    session_process_status *= session.Session.aggr(event.BehaviorRecording,
                                                                  behav='count(session_id)', keep_all_rows=True)
                    session_process_status *= session.Session.aggr(model.PoseEstimation,
                                                                  pose='count(recording_id)', keep_all_rows=True)
                
                    query = session_process_status
                    
                    return {'query': query, 'fetch_args': {'order_by': 'pose DESC, session_datetime DESC'}}

    DLCPerSessionPlots:
      hidden: true
      route: /DLC_per_session_plots
      grids:
        pose_estimation:
          route: /per_session_plots_pose_estimation
          type: dynamic
          columns: 1
          row_height: 1000
          restriction: >
            def restriction(**kwargs):
                return dict(**kwargs)
          dj_query: >
            def dj_query(sabatini_dj_report):
                report = sabatini_dj_report
                return {'query': report.PoseEstimationPlots.Summary.proj(), 'fetch_args': []}
          component_templates:
            comp1:
              route: /per_session_plots_pose_estimation_comp1
              type: file:image:attach
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_report):
                    report = sabatini_dj_report
                    return {'query': report.PoseEstimationPlots.Summary(), 'fetch_args': ['bodypart_xy_plot']}
            comp2:
              route: /per_session_plots_pose_estimation_comp2
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_report):
                    report = sabatini_dj_report
                    return {'query': report.PoseEstimationPlots.Summary(), 'fetch_args': ['bodypart_time_plot']}
  
    Photometry Session Overview:
        route: /photom_session_overview
        grids:
          grid1:
            type: fixed
            columns: 1
            row_height: 680
            components:
              Session Status:
                route: /photom_session_sessionstatus
                link: /photom_per_session_plots
                x: 0
                y: 0
                height: 1
                width: 1
                type: antd-table
                restriction: >
                  def restriction(**kwargs):
                      return dict(**kwargs)
                dj_query: >
                  def dj_query(sabatini_dj_session, sabatini_dj_event, sabatini_dj_photometry):
                      session = sabatini_dj_session
                      photometry = sabatini_dj_photometry
                      event = sabatini_dj_event

                      session_process_status = session.Session
                      session_process_status *= session.Session.aggr(event.BehaviorRecording,
                                                                    behav='count(session_id)', keep_all_rows=True)
                      session_process_status *= session.Session.aggr(photometry.FiberPhotometrySynced.SyncedTrace,
                                                                     photometry='count(fiber_id)', keep_all_rows=True)
                  
                      query = session_process_status
                      
                      return {'query': query, 'fetch_args': {'order_by': 'photometry DESC, session_datetime DESC'}}

    PhotomPerSessionPlots:
      hidden: true
      route: /photom_per_session_plots
      grids:
        fiber_photometry:
          type: dynamic
          route: /per_session_plots_fiber_photometry
          columns: 1
          row_height: 1500
          components:
            comp1:
              route: /per_session_plots_fiber_photometry_comp1
              type: file:image:attach
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_report):
                    report = sabatini_dj_report
                    return {'query': report.FiberPhotometryPlots(), 'fetch_args': ['demodulated_trace_plot']}
            comp2:
              route: /per_session_plots_fiber_photometry_comp2
              type: file:image:attach
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_report):
                    report = sabatini_dj_report
                    return {'query': report.FiberPhotometryPlots(), 'fetch_args': ['event_aligned_plot']}

    Neuropixel Session Overview:
            route: /npx_session_overview
            grids:
              grid1:
                type: fixed
                columns: 1
                row_height: 680
                components:
                  Session Status:
                    route: /npx_session_sessionstatus
                    link: /npx_per_session_plots
                    x: 0
                    y: 0
                    height: 1
                    width: 1
                    type: antd-table
                    restriction: >
                      def restriction(**kwargs):
                          return dict(**kwargs)
                    dj_query: >
                      def dj_query(sabatini_dj_session, sabatini_dj_event, sabatini_dj_ephys):
                          session = sabatini_dj_session
                          event = sabatini_dj_event
                          ephys = sabatini_dj_ephys

                          session_process_status = session.Session
                          session_process_status *= session.Session.aggr(event.BehaviorRecording,
                                                                        behav='count(session_id)', keep_all_rows=True)
                          session_process_status *= session.Session.aggr(ephys.CuratedClustering,
                                                                  ephys='count(insertion_number)', keep_all_rows=True)
                      
                          query = session_process_status
                          
                          return {'query': query, 'fetch_args': {'order_by': 'ephys DESC, session_datetime DESC'}}

    NpxPerSessionPlots:
      hidden: true
      route: /npx_per_session_plots
      grids:
        Ephys:
          type: dynamic
          route: /per_session_plots_Ephys
          columns: 1
          row_height: 1500
          components:
            comp1:
              route: /per_session_plots_Ephys_comp1
              type: file:image:attach
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_report):
                    report = sabatini_dj_report
                    return {'query': report.EphysPlots(), 'fetch_args': ['summary_plot']}
            comp2:
              route: /per_session_plots_Ephys_comp2
              type: file:image:attach
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_report):
                    report = sabatini_dj_report
                    return {'query': report.EphysPlots(), 'fetch_args': ['driftmap_plot']}
            comp3:
              route: /per_session_plots_Ephys_comp3
              type: file:image:attach
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_report):
                    report = sabatini_dj_report
                    return {'query': report.EphysPlots(), 'fetch_args': ['raster_plot']}
            comp4:
              route: /per_session_plots_Ephys_comp4
              type: file:image:attach
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_report):
                    report = sabatini_dj_report
                    return {'query': report.EphysPlots(), 'fetch_args': ['peak_waveforms_plot']}
            comp5:
              route: /per_session_plots_Ephys_comp5
              type: file:image:attach
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_report):
                    report = sabatini_dj_report
                    return {'query': report.EphysPlots(), 'fetch_args': ['periodogram_plot']}
            comp6:
              route: /per_session_plots_Ephys_comp6
              type: file:image:attach
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatini_dj_report):
                    report = sabatini_dj_report
                    return {'query': report.EphysPlots(), 'fetch_args': ['power_spectrum_plot']}